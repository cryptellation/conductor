
# Environment & GitHub CLI Rules

## .env for Tests
- Always load environment variables from `.env` (not example files) before running tests, locally or in CI.
- Use `direnv`, `dotenv`, or a shell command to source `.env`.
- Document required variables (e.g., `GITHUB_TOKEN`) in tests or README.
- Tests must skip gracefully if required variables are missing (see `internal/adapters/github/client_test.go`).
- Example:
  ```sh
  export $(grep -v '^#' .env | xargs) && go test ./...
  ```

## GitHub CLI Usage
- you should ALWAYS unset `GITHUB_TOKEN` before using `gh` CLI:
  ```sh
  unset GITHUB_TOKEN && gh <command>
  ```

---

# Development Workflow Rules

## Feature Development Phase
- **First Phase**: Develop the feature, write tests, and ensure code quality
- Run local tests and linting during development
- Set subtask status to `in progress` when starting development
- Only proceed to shipping phase when user explicitly approves (e.g., "ship it", "ready to ship", etc.)

## Branching & PRs
- Never push directly to `main`.
- All changes must be on a feature/fix branch (`feat-`, `fix-`, or `BREAKING-CHANGE-` prefix).
- Always create a pull request (PR) for changes. Merge only after review and all CI checks pass.

## Status Tracking
- Set the subtask status to `in progress` at the start of development
- Set status to `done` right before committing (after confirming all relevant changes are staged).

## Automated Post-Review Steps (Only After User Approval)
- **Trigger**: Only run these steps when user explicitly says "ship it", "ready to ship", or similar approval
- After user approval, perform these steps automatically (no user intervention unless errors/input needed):
  1. Run Dagger linter (if required by `.github/workflows/ci.yaml`) and automatically fix error until the dagger linter passes.
  2. Run Dagger tests (if required by `.github/workflows/ci.yaml`).
  3. Put status to `done` when all tests and linter are green.
  4. Create a branch (if not already on one).
  5. Commit all changes.
  6. Push to GitHub.
  7. Automatically create a PR to `main`.
  8. **Wait at least 10 seconds after PR creation before running PR checks** to ensure all checks have started.
  9. Wait for PR checks to pass using:
     ```sh
     gh pr checks <pr-number> --watch
     ```
  10. Merge the PR automatically when all checks are green.
  11. Switch to `main` and pull latest changes after merge.
- **If any error occurs during these steps, especially if there is an error in the tests or linter, the process must stop immediately and not proceed further.**
- The user should not be prompted to manually create a PR, monitor checks, or merge; these steps are handled automatically unless an error occurs.

## Example Statuses
- `to do`: Not started
- `in progress`: Task is being worked on
- `done`: Task is completed, reviewed, and approved by a human (set just before commit).

## Complete Development Workflow
1. **Development Phase**: Edit code on a feature/fix branch, write tests, ensure quality
2. **User Approval**: Wait for user to explicitly approve shipping (e.g., "ship it")
3. **Automated Shipping**: Run `dagger develop` if Dagger module changed, then execute all post-review steps
4. **Result**: Code is merged to `main` and ready for use
5. **Error Handling**: Cursor prompts the user for review and test confirmation only if an error occurs during shipping
6. **Automatic Process**: After user approval, Cursor handles the entire shipping process automatically
