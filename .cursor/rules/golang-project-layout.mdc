---
title: Go Project Layout Rule
description: This rule describes the standard Go project layout, as recommended by the [golang-standards/project-layout](https://github.com/golang-standards/project-layout) repository. Follow this structure for consistency, maintainability, and best practices in Go projects.
globs:
alwaysApply: true
---

# Go Project Layout Rule

This rule describes the standard Go project layout, as recommended by the [golang-standards/project-layout](https://github.com/golang-standards/project-layout) repository. Follow this structure for consistency, maintainability, and best practices in Go projects.

## Directory Structure

```
PROJECT_ROOT/
├── api/            # OpenAPI/Swagger specs, protocol definitions
├── assets/         # Images, logos, and other asset files
├── build/          # Packaging and CI/CD configurations
├── cmd/            # Main applications for this project
│   └── myapp/      # Each application in its own subdir
│       └── main.go
├── configs/        # Configuration file templates or default configs
├── deployments/    # IaaS, PaaS, system and container orchestration deployment configs
├── docs/           # Design and user documentation
├── examples/       # Examples for your applications and/or public libraries
├── internal/       # Private application and library code (importable only within this repo)
│   └── ...
├── pkg/            # Library code that's ok to use by external applications
├── scripts/        # Build, install, analysis, etc scripts
├── test/           # Additional external test apps and test data
├── third_party/    # External helper tools, forked code, 3rd party utilities
├── tools/          # Supporting tools for this project
├── vendor/         # Application dependencies (managed by Go modules)
├── web/            # Web application specific components
├── website/        # Project website data (if not using GitHub pages)
├── .editorconfig   # Editor configuration
├── .gitignore      # Git ignore rules
├── go.mod          # Go module definition
├── go.sum          # Go module checksums
└── README.md       # Project overview
```

## Key Directories Explained

- **cmd/**: Main applications for this project. Each app has its own subdirectory (e.g., `cmd/conductor/main.go`).
- **internal/**: Private code. Packages here are only importable by code within this repo.
- **pkg/**: Public libraries intended for use by external applications.
- **configs/**: Configuration templates and default configs (e.g., YAML files).
- **scripts/**: Utility scripts for build, install, analysis, etc.
- **build/**: Packaging and CI/CD configuration files.
- **deployments/**: Deployment configurations (Docker Compose, Kubernetes, etc).
- **docs/**: Additional documentation beyond GoDoc.
- **test/**: External test apps and test data.
- **third_party/**: Forked code, external tools, and utilities.
- **tools/**: Supporting tools for the project.
- **vendor/**: Application dependencies (managed by Go modules).
- **web/**: Web application components (static assets, templates, SPAs).
- **website/**: Project website data.

## Best Practices

1. **Do not use a top-level `src/` directory** (common in Java, not Go).
2. **Keep main applications in `cmd/`**; each app in its own subdirectory.
3. **Use `internal/` for private code** to prevent external imports.
4. **Use `pkg/` for public libraries** intended for use by other projects.
5. **Store configuration templates in `configs/`**.
6. **Keep scripts in `scripts/`** to avoid cluttering the root directory.
7. **Document your project in `docs/` and `README.md`**.
8. **Use Go modules (`go.mod`, `go.sum`) for dependency management**.
9. **Do not commit dependencies in `vendor/` unless necessary**.
10. **Organize deployment and CI/CD files in `deployments/` and `build/`**.

## Example

```go
// Good: main.go in cmd/conductor
// cmd/conductor/main.go
package main

func main() {
    // Application entry point
}
```

For more details, see the [golang-standards/project-layout](https://github.com/golang-standards/project-layout) repository.
