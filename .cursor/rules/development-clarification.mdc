---
title: Development Clarification Rule
description: This rule ensures that when implementing code, you MUST ask clarifying questions if there is any ambiguity in the user's prompt or requirements.
alwaysApply: true
---

# Development Clarification Rule

When implementing code or making development decisions, you **MUST** ask clarifying questions if there is any ambiguity in the user's prompt or requirements. This rule ensures high-quality, accurate implementations and prevents misunderstandings.

## When to Ask Questions

Ask clarifying questions when you encounter any of the following:

### 1. **Vague or Incomplete Requirements**
- Unclear functionality descriptions
- Missing implementation details
- Ambiguous user stories or feature requests
- Unspecified error handling requirements

### 2. **Technical Ambiguities**
- Unclear data structures or formats
- Missing API specifications
- Undefined error scenarios
- Unspecified performance requirements
- Ambiguous naming conventions

### 3. **Architecture and Design Decisions**
- Unclear component responsibilities
- Missing integration points
- Undefined interfaces or contracts
- Unspecified testing requirements

### 4. **Configuration and Environment**
- Missing environment variables
- Unclear configuration parameters
- Undefined deployment requirements
- Unspecified dependency versions

## How to Ask Questions

### Format Your Questions Clearly
- Be specific about what's unclear
- Provide context about what you understand
- Suggest possible interpretations
- Ask for concrete examples when helpful

### Examples of Good Questions

**Instead of:** "What should I do about errors?"
**Ask:** "Should I log errors to stderr, return them as part of the response, or both? Also, what level of error detail should be exposed to users vs. logged internally?"

**Instead of:** "How should I structure this?"
**Ask:** "Should this functionality be a separate package in `pkg/` or part of the existing `internal/conductor` package? What's the intended reusability scope?"

**Instead of:** "What format should this be in?"
**Ask:** "Should the configuration be in YAML format like the existing `configs/conductor.example.yaml`, or would you prefer JSON or environment variables?"

## Implementation Guidelines

### Before Starting Implementation
1. **Analyze the request** for any unclear aspects
2. **Identify specific ambiguities** that could affect the implementation
3. **Formulate clear questions** that will resolve the ambiguity
4. **Ask the questions** before proceeding with implementation

### During Implementation
1. **If new ambiguities arise** during coding, stop and ask questions
2. **Don't make assumptions** about unspecified requirements
3. **Document any decisions** made based on clarifications

### After Implementation
1. **Verify the implementation** matches the clarified requirements
2. **Ask for feedback** if there are still unclear aspects
3. **Suggest improvements** based on the implementation experience

## Examples of Ambiguous Requests and Clarifying Questions

### Example 1: "Add error handling"
**Clarifying Questions:**
- What types of errors should be handled? (network, validation, system, etc.)
- How should errors be communicated to users? (logs, error responses, UI messages)
- Should the application continue running or exit on critical errors?
- What error information should be logged vs. exposed to users?

### Example 2: "Make it faster"
**Clarifying Questions:**
- Which specific operations need performance improvement?
- What's the current performance baseline and target?
- Are there any memory or resource constraints to consider?
- Should I focus on algorithmic improvements, caching, or parallelization?

### Example 3: "Add tests"
**Clarifying Questions:**
- What level of testing is needed? (unit, integration, end-to-end)
- Which specific functionality should be tested?
- What's the desired test coverage percentage?
- Should I use the existing testing patterns in the codebase?

## Exception Cases

You may proceed without asking questions only when:
1. **The requirement is completely unambiguous** and all details are specified
2. **You're following established patterns** in the codebase
3. **The ambiguity is minor** and you can implement a reasonable default that can be easily changed later

## Remember

- **It's better to ask one question too many than to implement incorrectly**
- **Clarifying questions show professionalism and attention to detail**
- **The time spent clarifying saves significant time in rework**
- **Your questions help improve the overall quality of the codebase**

Always prioritize **accuracy and correctness** over **speed of implementation**.
