// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source=client.go -destination=mock.gen.go -package=github
//

// Package github is a generated GoMock package.
package github

import (
	context "context"
	reflect "reflect"

	github "github.com/google/go-github/v55/github"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CheckPullRequestExists mocks base method.
func (m *MockClient) CheckPullRequestExists(ctx context.Context, params CheckPullRequestExistsParams) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckPullRequestExists", ctx, params)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckPullRequestExists indicates an expected call of CheckPullRequestExists.
func (mr *MockClientMockRecorder) CheckPullRequestExists(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPullRequestExists", reflect.TypeOf((*MockClient)(nil).CheckPullRequestExists), ctx, params)
}

// CreateMergeRequest mocks base method.
func (m *MockClient) CreateMergeRequest(ctx context.Context, params CreateMergeRequestParams) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMergeRequest", ctx, params)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMergeRequest indicates an expected call of CreateMergeRequest.
func (mr *MockClientMockRecorder) CreateMergeRequest(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMergeRequest", reflect.TypeOf((*MockClient)(nil).CreateMergeRequest), ctx, params)
}

// DeleteBranch mocks base method.
func (m *MockClient) DeleteBranch(ctx context.Context, params DeleteBranchParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBranch", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBranch indicates an expected call of DeleteBranch.
func (mr *MockClientMockRecorder) DeleteBranch(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBranch", reflect.TypeOf((*MockClient)(nil).DeleteBranch), ctx, params)
}

// GetFileContent mocks base method.
func (m *MockClient) GetFileContent(ctx context.Context, params GetFileContentParams) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileContent", ctx, params)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileContent indicates an expected call of GetFileContent.
func (mr *MockClientMockRecorder) GetFileContent(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileContent", reflect.TypeOf((*MockClient)(nil).GetFileContent), ctx, params)
}

// GetPullRequestChecks mocks base method.
func (m *MockClient) GetPullRequestChecks(ctx context.Context, params GetPullRequestChecksParams) (*CheckStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPullRequestChecks", ctx, params)
	ret0, _ := ret[0].(*CheckStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPullRequestChecks indicates an expected call of GetPullRequestChecks.
func (mr *MockClientMockRecorder) GetPullRequestChecks(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPullRequestChecks", reflect.TypeOf((*MockClient)(nil).GetPullRequestChecks), ctx, params)
}

// ListTags mocks base method.
func (m *MockClient) ListTags(ctx context.Context, owner, repo string) ([]*github.RepositoryTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTags", ctx, owner, repo)
	ret0, _ := ret[0].([]*github.RepositoryTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTags indicates an expected call of ListTags.
func (mr *MockClientMockRecorder) ListTags(ctx, owner, repo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTags", reflect.TypeOf((*MockClient)(nil).ListTags), ctx, owner, repo)
}

// MergeMergeRequest mocks base method.
func (m *MockClient) MergeMergeRequest(ctx context.Context, params MergeMergeRequestParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MergeMergeRequest", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// MergeMergeRequest indicates an expected call of MergeMergeRequest.
func (mr *MockClientMockRecorder) MergeMergeRequest(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MergeMergeRequest", reflect.TypeOf((*MockClient)(nil).MergeMergeRequest), ctx, params)
}
