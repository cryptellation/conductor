// Code generated by MockGen. DO NOT EDIT.
// Source: version_detection.go
//
// Generated by this command:
//
//	mockgen -destination=mock_version_detection.gen.go -package=repo -source=version_detection.go VersionDetector
//

// Package repo is a generated GoMock package.
package repo

import (
	context "context"
	reflect "reflect"

	github "github.com/cryptellation/depsync/pkg/adapters/github"
	depgraph "github.com/cryptellation/depsync/pkg/depgraph"
	gomock "go.uber.org/mock/gomock"
)

// MockVersionDetector is a mock of VersionDetector interface.
type MockVersionDetector struct {
	ctrl     *gomock.Controller
	recorder *MockVersionDetectorMockRecorder
	isgomock struct{}
}

// MockVersionDetectorMockRecorder is the mock recorder for MockVersionDetector.
type MockVersionDetectorMockRecorder struct {
	mock *MockVersionDetector
}

// NewMockVersionDetector creates a new mock instance.
func NewMockVersionDetector(ctrl *gomock.Controller) *MockVersionDetector {
	mock := &MockVersionDetector{ctrl: ctrl}
	mock.recorder = &MockVersionDetectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVersionDetector) EXPECT() *MockVersionDetectorMockRecorder {
	return m.recorder
}

// DetectAndSetCurrentVersions mocks base method.
func (m *MockVersionDetector) DetectAndSetCurrentVersions(ctx context.Context, client github.Client, services map[string]*depgraph.Service) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetectAndSetCurrentVersions", ctx, client, services)
	ret0, _ := ret[0].(error)
	return ret0
}

// DetectAndSetCurrentVersions indicates an expected call of DetectAndSetCurrentVersions.
func (mr *MockVersionDetectorMockRecorder) DetectAndSetCurrentVersions(ctx, client, services any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetectAndSetCurrentVersions", reflect.TypeOf((*MockVersionDetector)(nil).DetectAndSetCurrentVersions), ctx, client, services)
}
