// Code generated by MockGen. DO NOT EDIT.
// Source: files_fetcher.go
//
// Generated by this command:
//
//	mockgen -source=files_fetcher.go -destination=mock_fetcher.gen.go -package=repo
//

// Package repo is a generated GoMock package.
package repo

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFilesFetcher is a mock of FilesFetcher interface.
type MockFilesFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockFilesFetcherMockRecorder
	isgomock struct{}
}

// MockFilesFetcherMockRecorder is the mock recorder for MockFilesFetcher.
type MockFilesFetcherMockRecorder struct {
	mock *MockFilesFetcher
}

// NewMockFilesFetcher creates a new mock instance.
func NewMockFilesFetcher(ctrl *gomock.Controller) *MockFilesFetcher {
	mock := &MockFilesFetcher{ctrl: ctrl}
	mock.recorder = &MockFilesFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilesFetcher) EXPECT() *MockFilesFetcherMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockFilesFetcher) Fetch(ctx context.Context, repoURL, ref string, files ...string) (map[string][]byte, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, repoURL, ref}
	for _, a := range files {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Fetch", varargs...)
	ret0, _ := ret[0].(map[string][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockFilesFetcherMockRecorder) Fetch(ctx, repoURL, ref any, files ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, repoURL, ref}, files...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockFilesFetcher)(nil).Fetch), varargs...)
}
