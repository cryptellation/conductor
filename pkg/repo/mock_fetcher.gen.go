// Code generated by MockGen. DO NOT EDIT.
// Source: fetcher.go

// Package repofetcher is a generated GoMock package.
package repo

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFetcher is a mock of Fetcher interface.
type MockFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockFetcherMockRecorder
}

// MockFetcherMockRecorder is the mock recorder for MockFetcher.
type MockFetcherMockRecorder struct {
	mock *MockFetcher
}

// NewMockFetcher creates a new mock instance.
func NewMockFetcher(ctrl *gomock.Controller) *MockFetcher {
	mock := &MockFetcher{ctrl: ctrl}
	mock.recorder = &MockFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFetcher) EXPECT() *MockFetcherMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockFetcher) Fetch(ctx context.Context, repoURL, ref string, files ...string) (map[string][]byte, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, repoURL, ref}
	for _, a := range files {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchRepositoryFiles", varargs...)
	ret0, _ := ret[0].(map[string][]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchRepositoryFiles indicates an expected call of FetchRepositoryFiles.
func (mr *MockFetcherMockRecorder) FetchRepositoryFiles(ctx, repoURL, ref interface{}, files ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, repoURL, ref}, files...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchRepositoryFiles", reflect.TypeOf((*MockFetcher)(nil).Fetch), varargs...)
}
