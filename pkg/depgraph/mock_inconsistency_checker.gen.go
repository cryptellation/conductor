// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cryptellation/conductor/pkg/depgraph (interfaces: InconsistencyChecker)
//
// Generated by this command:
//
//	mockgen -destination=mock_inconsistency_checker.gen.go -package=depgraph . InconsistencyChecker
//

// Package depgraph is a generated GoMock package.
package depgraph

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockInconsistencyChecker is a mock of InconsistencyChecker interface.
type MockInconsistencyChecker struct {
	ctrl     *gomock.Controller
	recorder *MockInconsistencyCheckerMockRecorder
	isgomock struct{}
}

// MockInconsistencyCheckerMockRecorder is the mock recorder for MockInconsistencyChecker.
type MockInconsistencyCheckerMockRecorder struct {
	mock *MockInconsistencyChecker
}

// NewMockInconsistencyChecker creates a new mock instance.
func NewMockInconsistencyChecker(ctrl *gomock.Controller) *MockInconsistencyChecker {
	mock := &MockInconsistencyChecker{ctrl: ctrl}
	mock.recorder = &MockInconsistencyCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInconsistencyChecker) EXPECT() *MockInconsistencyCheckerMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockInconsistencyChecker) Check(graph map[string]*Service) (map[string]map[string]Mismatch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", graph)
	ret0, _ := ret[0].(map[string]map[string]Mismatch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockInconsistencyCheckerMockRecorder) Check(graph any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockInconsistencyChecker)(nil).Check), graph)
}
