// Code generated by MockGen. DO NOT EDIT.
// Source: builder.go
//
// Generated by this command:
//
//	mockgen -destination=mock_builder.gen.go -package=depgraph -source=builder.go GraphBuilder
//

// Package depgraph is a generated GoMock package.
package depgraph

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGraphBuilder is a mock of GraphBuilder interface.
type MockGraphBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockGraphBuilderMockRecorder
	isgomock struct{}
}

// MockGraphBuilderMockRecorder is the mock recorder for MockGraphBuilder.
type MockGraphBuilderMockRecorder struct {
	mock *MockGraphBuilder
}

// NewMockGraphBuilder creates a new mock instance.
func NewMockGraphBuilder(ctrl *gomock.Controller) *MockGraphBuilder {
	mock := &MockGraphBuilder{ctrl: ctrl}
	mock.recorder = &MockGraphBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphBuilder) EXPECT() *MockGraphBuilderMockRecorder {
	return m.recorder
}

// BuildGraph mocks base method.
func (m *MockGraphBuilder) BuildGraph(modules map[string]RepoModule) (map[string]*Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildGraph", modules)
	ret0, _ := ret[0].(map[string]*Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildGraph indicates an expected call of BuildGraph.
func (mr *MockGraphBuilderMockRecorder) BuildGraph(modules any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildGraph", reflect.TypeOf((*MockGraphBuilder)(nil).BuildGraph), modules)
}
